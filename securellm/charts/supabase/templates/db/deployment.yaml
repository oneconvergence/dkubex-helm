{{- if not .Values.global.db.externalDB -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.db.fullname" . }}
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
spec:
  {{- if not .Values.db.autoscaling.enabled }}
  replicas: {{ .Values.db.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "supabase.db.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.db.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "supabase.db.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.db.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "supabase.db.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.db.podSecurityContext | nindent 8 }}
      initContainers:
      - name: init
        image: bitnami/kubectl:1.25.9
        securityContext:
          runAsUser: 0
        env:
        - name: WIPE_DATA
          value: "{{ .Values.global.db.wipedata }}"
        command:
        - bash
        - -c
        - |
          set -e
          path=/mnt/postgresql/data/{{ .Values.global.db.internal.nfs.path | trimPrefix "/" }}
          mkdir -p $path
          if [[ "$WIPE_DATA" == "true" ]]; then
              done=$(kubectl get cm -n {{ .Release.Namespace }} supabase-db -ojsonpath='{.data.wipedata_done}')
              if [[ $? -ne 0 ]]; then
                  echo "Error in fetching configmap supabase-db: $done"
                  exit 1
              fi
              if [[ "$done" != "false" ]] && [[ "$done" != "true" ]]; then
                  echo "Invalid value in configmap supabase-db: $done"
                  exit 1
              fi
              if [[ "$done" == "false" ]]; then
                  rm -rfv $path/{..?*,.[!.]*,*}
                  kubectl patch cm -n {{ .Release.Namespace }} supabase-db --type merge -p '{"data":{"wipedata_done":"true"}}'
              fi
          fi
        volumeMounts:
          {{- if .Values.global.db.internal.nfs.enabled }}
          - mountPath: "/mnt/postgresql/data"
            name: postgres-volume
          {{- end }}
      containers:
        - name: {{ include "supabase.db.name" $ }}
          securityContext:
            {{- toYaml .Values.db.securityContext | nindent 12 }}
          image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.db.image.pullPolicy }}
          env:
            {{- range $key, $value := .Values.db.environment }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "supabase.db.fullname" $ }}
                  key: {{ $key }}
            {{- end }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secretName }}
                  key: DB_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/{{ .Values.global.db.internal.nfs.path | trimPrefix "/" }}
          ports:
            - name: http
              containerPort: 9999
              protocol: TCP
          volumeMounts:
            {{- with .Values.db.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if .Values.global.db.internal.nfs.enabled }}
            - mountPath: "/var/lib/postgresql/data"
              name: postgres-volume
            {{- end }}
          {{- with .Values.db.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- with .Values.db.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.global.db.internal.nfs.enabled }}
        - name: postgres-volume
          persistentVolumeClaim:
            claimName: securellm
        {{- end }}
      {{- with .Values.db.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
