# Default values for dkubex.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

app_namespace: "d3x"
image_tag: "0.8.8.1"
admin_password: "dkubex"
provider : "dkubex" # dkubex/eks
eks:
    autoscaler_arn : ""
    cluster_name: "" 

# Docker registry for installation
registry:
    # Format: registry/[repo]
    name: "docker.io/dkubex123"

    # Container registry username
    username: ""

    # Container registry password
    password: ""

# nfs or hostpath
storage_type: "nfs"
nfs:
    # true for creating internal nfs server
    create_server: true
    # specify host path for creating internal nfs
    storage_path: "/var/dkubex"
    internal_nfs_node_selector:
        node_selector_key: "kubernetes.io/os"
        node_selector_value: "linux"
        taint : ""
    # Format: <server ip>:<path>
    nfs_server: "kubernetes:/"
    # specify nfs version supported are 4.1 and 4.0
    version: "4.1"
hostpath:
    # specify  host path 
    storage_path: "/var/dkubex"

#specify the home_nfs_server if the user home is different 
user_home_nfs_server: ""
# specify nfs version for user home supported are 4.1 and 4.0
user_home_nfs_server_version: "4.1"

wipe_data: false #delete data from the storage
# Format: dialect+driver://username:password@host:port/database
database_url: ""
image_pull_policy: "Always"
loadbalancer:
    enabled: false
    eks:
        name: "dkubex"
        #aws cert arn
        cert_arn : ""
        cross_zone_lb: false
        internal_lb: true
        scheme: ""
        subnets: ""
        tags: ""

# docker registry prifix
reg_prefix : ""

# enables gpu for dkubex
gpu_operator:
   enabled: false     
   driver: false #install driver
   toolkit: false #install toolkit

# enables datadog  for dkubex   
datadog:
   enabled: false     
   site: ""                #Datadog site 
   key: ""                 #datadog key
   cluster_name: ""        #Set a unique cluster name to allow scoping hosts and Cluster Checks easily 

# enables fm for dkubex
fm:
    enabled: true
    s3:
        enabled : false
        bucket_name: ""     # Bucket is used for both s3-mount on fm-controller and weaviate s3 backup
        weaviate_backup_path: ""
        aws_access_key_id: ""
        aws_access_secret: ""
    weaviate:
        api_key : ""
        loadbalancer:
            cert_arn : ""
            enabled: false
            name: "dkubex-weaviate"

# enables kubeflow for dkubex
kubeflow:
    enabled: false

#enables sssd integration with dkubex can use sssd/ldap/local_ldap
sssd:
    enabled: true
    type: ldap #sssd/ldap
    ldap_server: 
        #create local ldap server for user management
        enabled: true
        auto_user_add: true #this will add authenticated user to the ldap if user doesnot exist. 

    #if ldap_server is not enabled details for ldap and sssd
    #details of Ad when type is sssd and ldap server is not enabled
    ad: ""
    ldap_id_mapping: true
    bind_password: ""
    ou: ""
    bind_user: ""
    #details of ldap when type is ldap and ldap server is not enabled 
    ldap_url: ""
    ladap_search_base: ""


#enables Oauth for dkubex, user can configure this from admin ui after installation too 
auth:
    enabled: false
    provider: "github" #okta/github/azure/adfs/keycloak
    issuer_url: ""
    client_id: ""
    client_secret: ""
    redirect_url: "" #https://<IP/DOMAIN_NAME>:32443/oauth2/callback
    organisation: ""
    email_domain: "*"
    azure_tenant: "" #tenent id for azure ad
    realm: "" # realm for keycload
    allowed_role: "" #keycload allowed role name
    allowed_group: "" # keycload allowed group name

mlflow:
    replica_count : 1
    database_url: ""
    artifacts_destination: ""
    aws_access_key_id: ""
    aws_access_secret: ""
flyte:
    enabled: false
    accountNumber: #aws-account number
    accountRegion: #aws-region
    bucketName: #s3bucket name
    d3xUrl: #external url to access d3x
    cert_arn : ""
    max_download_mbs: 10
node_selector_label: "node.kubernetes.io/instance-type"
pod_security_enforce: ""

# Dkubex components/controllers will be scheduled onto control-plane nodes.
control_plane:
    node_selector: "kubernetes.io/os"
    node_selector_value: "linux"
    node_taint: "dkubex/controlplane=true:NoSchedule"
    enabled: false

mlflow_controller:
    node_selector: "kubernetes.io/os"
    node_selector_value: "linux"
    node_taint: ""

weka:
    enabled: false
    file_system_name: ""
    ips: ""
    username: ""
    password : ""
workspace:
    enabled: true
